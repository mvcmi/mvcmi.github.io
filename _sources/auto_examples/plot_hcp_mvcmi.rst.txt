
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_hcp_mvcmi.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_hcp_mvcmi.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_hcp_mvcmi.py:


=====================
Run MVCMI on HCP data
=====================

This example demonstrates how to run MVCMI on
pre-processed HCP data.

.. GENERATED FROM PYTHON SOURCE LINES 9-13

.. code-block:: Python


    # Authors: Padma Sundaram <padma@nmr.mgh.harvard.edu>
    #          Mainak Jas <mjas@mgh.harvard.edu>








.. GENERATED FROM PYTHON SOURCE LINES 14-15

we will first load the necessary modules

.. GENERATED FROM PYTHON SOURCE LINES 15-28

.. code-block:: Python

    import numpy as np
    import matplotlib.pyplot as plt

    from mvcmi import compute_cmi, compute_ccoef_pca, generate_noise_ts, z_score
    from mvcmi.pca import reduce_dim
    from mvcmi.datasets import fetch_hcp_sample, load_label_ts

    from joblib import Parallel, delayed

    n_jobs = 30 # number of cores to use when running PCA in parallel
    n_parcels = 10 # just to make example run faster
    dim_red = 0.95








.. GENERATED FROM PYTHON SOURCE LINES 29-30

load the preprocessed data

.. GENERATED FROM PYTHON SOURCE LINES 30-36

.. code-block:: Python

    path = '/autofs/space/meghnn_001/users/mjas/github_repos/mvcmi_open/examples/mvcmi_data'
    data_path = fetch_hcp_sample(path=path)

    label_ts_fname = data_path / 'label_ts.npz'
    label_ts = load_label_ts(label_ts_fname, n_parcels=n_parcels)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    done reading in label_ts

    167





.. GENERATED FROM PYTHON SOURCE LINES 37-38

reduce dimensionality using PCA

.. GENERATED FROM PYTHON SOURCE LINES 38-48

.. code-block:: Python

    n_times = label_ts[0].shape[1] 

    min_dim = 2
    max_dim = n_times - 15

    parcel_sizes = [None] * len(label_ts)
    label_ts_red = Parallel(n_jobs=n_jobs, verbose=4)(delayed(reduce_dim)(
        this_ts, dim_red=dim_red, min_dim=min_dim, max_dim=max_dim, n_use=n_use)
        for this_ts, n_use in zip(label_ts, parcel_sizes))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [Parallel(n_jobs=30)]: Using backend LokyBackend with 30 concurrent workers.
    [Parallel(n_jobs=30)]: Done   2 out of  10 | elapsed:    1.0s remaining:    4.0s
    [Parallel(n_jobs=30)]: Done   5 out of  10 | elapsed:    1.9s remaining:    1.9s
    [Parallel(n_jobs=30)]: Done   8 out of  10 | elapsed:    2.1s remaining:    0.5s
    [Parallel(n_jobs=30)]: Done  10 out of  10 | elapsed:    2.7s finished




.. GENERATED FROM PYTHON SOURCE LINES 49-50

do the actual CMI computation

.. GENERATED FROM PYTHON SOURCE LINES 50-53

.. code-block:: Python

    print("computing cmi")
    data_cmi = compute_cmi(label_ts_red)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    computing cmi
    mvcon compute_cmi
    mvcon partial_corr_mvar
    (1633, 1200)
    (11,)
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    mvcon cmui_from_pcor_mvar
    /autofs/space/meghnn_001/users/mjas/github_repos/mvcmi_open/mvcmi/algo.py:70: RuntimeWarning: invalid value encountered in log
      cmui[ii, jj] = -0.5 * np.sum(np.log(1 - s[0:n]))




.. GENERATED FROM PYTHON SOURCE LINES 54-55

compare to correlation coefficient

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: Python

    print("computing sccoef_pca")
    corrmtx = compute_ccoef_pca(label_ts_red)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    computing sccoef_pca




.. GENERATED FROM PYTHON SOURCE LINES 59-60

plot the CMI matrix

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: Python

    plt.imshow(data_cmi)
    plt.colorbar()




.. image-sg:: /auto_examples/images/sphx_glr_plot_hcp_mvcmi_001.png
   :alt: plot hcp mvcmi
   :srcset: /auto_examples/images/sphx_glr_plot_hcp_mvcmi_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.colorbar.Colorbar object at 0x7ff2c428d310>



.. GENERATED FROM PYTHON SOURCE LINES 64-65

plot the correlation matrix

.. GENERATED FROM PYTHON SOURCE LINES 65-69

.. code-block:: Python

    plt.figure()
    plt.imshow(corrmtx)
    plt.colorbar()




.. image-sg:: /auto_examples/images/sphx_glr_plot_hcp_mvcmi_002.png
   :alt: plot hcp mvcmi
   :srcset: /auto_examples/images/sphx_glr_plot_hcp_mvcmi_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.colorbar.Colorbar object at 0x7ff2c41482b0>



.. GENERATED FROM PYTHON SOURCE LINES 70-73

now let us compute CMI for the null distribution. Generally, the number
of seeds are determined empirically. For the HCP dataset, it was observed
that 50 seeds are sufficient to obtain stable null distribution.

.. GENERATED FROM PYTHON SOURCE LINES 73-81

.. code-block:: Python

    noise_ts = generate_noise_ts(label_ts, label_ts_red, min_dim, max_dim,
                                 dim_red=dim_red, seed1=0, seed2=10,
                                 n_jobs=n_jobs)
    null_cmis = list()
    for seed, this_noise_ts in enumerate(noise_ts):  # iterate over seeds
        print(f'mvcmi for seed {seed}')
        null_cmis.append(compute_cmi(this_noise_ts))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Generating noise time series
    0
    [Parallel(n_jobs=30)]: Using backend LokyBackend with 30 concurrent workers.
    [Parallel(n_jobs=30)]: Done   2 out of  10 | elapsed:    0.5s remaining:    1.9s
    [Parallel(n_jobs=30)]: Done   5 out of  10 | elapsed:    0.7s remaining:    0.7s
    [Parallel(n_jobs=30)]: Done   8 out of  10 | elapsed:    0.8s remaining:    0.2s
    [Parallel(n_jobs=30)]: Done  10 out of  10 | elapsed:    1.0s finished
    1
    [Parallel(n_jobs=30)]: Using backend LokyBackend with 30 concurrent workers.
    [Parallel(n_jobs=30)]: Done   2 out of  10 | elapsed:    0.5s remaining:    2.0s
    [Parallel(n_jobs=30)]: Done   5 out of  10 | elapsed:    0.7s remaining:    0.7s
    [Parallel(n_jobs=30)]: Done   8 out of  10 | elapsed:    0.8s remaining:    0.2s
    [Parallel(n_jobs=30)]: Done  10 out of  10 | elapsed:    1.1s finished
    2
    [Parallel(n_jobs=30)]: Using backend LokyBackend with 30 concurrent workers.
    [Parallel(n_jobs=30)]: Done   2 out of  10 | elapsed:    0.1s remaining:    0.3s
    [Parallel(n_jobs=30)]: Done   5 out of  10 | elapsed:    0.3s remaining:    0.3s
    [Parallel(n_jobs=30)]: Done   8 out of  10 | elapsed:    0.4s remaining:    0.1s
    [Parallel(n_jobs=30)]: Done  10 out of  10 | elapsed:    0.7s finished
    3
    [Parallel(n_jobs=30)]: Using backend LokyBackend with 30 concurrent workers.
    [Parallel(n_jobs=30)]: Done   2 out of  10 | elapsed:    0.1s remaining:    0.3s
    [Parallel(n_jobs=30)]: Done   5 out of  10 | elapsed:    0.3s remaining:    0.3s
    [Parallel(n_jobs=30)]: Done   8 out of  10 | elapsed:    0.4s remaining:    0.1s
    [Parallel(n_jobs=30)]: Done  10 out of  10 | elapsed:    0.7s finished
    4
    [Parallel(n_jobs=30)]: Using backend LokyBackend with 30 concurrent workers.
    [Parallel(n_jobs=30)]: Done   2 out of  10 | elapsed:    0.1s remaining:    0.4s
    [Parallel(n_jobs=30)]: Done   5 out of  10 | elapsed:    0.3s remaining:    0.3s
    [Parallel(n_jobs=30)]: Done   8 out of  10 | elapsed:    0.4s remaining:    0.1s
    [Parallel(n_jobs=30)]: Done  10 out of  10 | elapsed:    0.6s finished
    5
    [Parallel(n_jobs=30)]: Using backend LokyBackend with 30 concurrent workers.
    [Parallel(n_jobs=30)]: Done   2 out of  10 | elapsed:    0.1s remaining:    0.3s
    [Parallel(n_jobs=30)]: Done   5 out of  10 | elapsed:    0.3s remaining:    0.3s
    [Parallel(n_jobs=30)]: Done   8 out of  10 | elapsed:    0.3s remaining:    0.1s
    [Parallel(n_jobs=30)]: Done  10 out of  10 | elapsed:    0.6s finished
    6
    [Parallel(n_jobs=30)]: Using backend LokyBackend with 30 concurrent workers.
    [Parallel(n_jobs=30)]: Done   2 out of  10 | elapsed:    0.1s remaining:    0.3s
    [Parallel(n_jobs=30)]: Done   5 out of  10 | elapsed:    0.3s remaining:    0.3s
    [Parallel(n_jobs=30)]: Done   8 out of  10 | elapsed:    0.4s remaining:    0.1s
    [Parallel(n_jobs=30)]: Done  10 out of  10 | elapsed:    0.7s finished
    7
    [Parallel(n_jobs=30)]: Using backend LokyBackend with 30 concurrent workers.
    [Parallel(n_jobs=30)]: Done   2 out of  10 | elapsed:    0.1s remaining:    0.4s
    [Parallel(n_jobs=30)]: Done   5 out of  10 | elapsed:    0.3s remaining:    0.3s
    [Parallel(n_jobs=30)]: Done   8 out of  10 | elapsed:    0.4s remaining:    0.1s
    [Parallel(n_jobs=30)]: Done  10 out of  10 | elapsed:    0.7s finished
    8
    [Parallel(n_jobs=30)]: Using backend LokyBackend with 30 concurrent workers.
    [Parallel(n_jobs=30)]: Done   2 out of  10 | elapsed:    0.1s remaining:    0.3s
    [Parallel(n_jobs=30)]: Done   5 out of  10 | elapsed:    0.3s remaining:    0.3s
    [Parallel(n_jobs=30)]: Done   8 out of  10 | elapsed:    0.3s remaining:    0.1s
    [Parallel(n_jobs=30)]: Done  10 out of  10 | elapsed:    0.6s finished
    9
    [Parallel(n_jobs=30)]: Using backend LokyBackend with 30 concurrent workers.
    [Parallel(n_jobs=30)]: Done   2 out of  10 | elapsed:    0.1s remaining:    0.3s
    [Parallel(n_jobs=30)]: Done   5 out of  10 | elapsed:    0.3s remaining:    0.3s
    [Parallel(n_jobs=30)]: Done   8 out of  10 | elapsed:    0.4s remaining:    0.1s
    [Parallel(n_jobs=30)]: Done  10 out of  10 | elapsed:    0.6s finished
    10
    [Parallel(n_jobs=30)]: Using backend LokyBackend with 30 concurrent workers.
    [Parallel(n_jobs=30)]: Done   2 out of  10 | elapsed:    0.1s remaining:    0.4s
    [Parallel(n_jobs=30)]: Done   5 out of  10 | elapsed:    0.3s remaining:    0.3s
    [Parallel(n_jobs=30)]: Done   8 out of  10 | elapsed:    0.4s remaining:    0.1s
    [Parallel(n_jobs=30)]: Done  10 out of  10 | elapsed:    0.7s finished
    mvcmi for seed 0
    mvcon compute_cmi
    mvcon partial_corr_mvar
    (1633, 1200)
    (11,)
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    mvcon cmui_from_pcor_mvar
    mvcmi for seed 1
    mvcon compute_cmi
    mvcon partial_corr_mvar
    (1633, 1200)
    (11,)
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    mvcon cmui_from_pcor_mvar
    mvcmi for seed 2
    mvcon compute_cmi
    mvcon partial_corr_mvar
    (1633, 1200)
    (11,)
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    mvcon cmui_from_pcor_mvar
    mvcmi for seed 3
    mvcon compute_cmi
    mvcon partial_corr_mvar
    (1633, 1200)
    (11,)
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    mvcon cmui_from_pcor_mvar
    mvcmi for seed 4
    mvcon compute_cmi
    mvcon partial_corr_mvar
    (1633, 1200)
    (11,)
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    mvcon cmui_from_pcor_mvar
    mvcmi for seed 5
    mvcon compute_cmi
    mvcon partial_corr_mvar
    (1633, 1200)
    (11,)
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    mvcon cmui_from_pcor_mvar
    mvcmi for seed 6
    mvcon compute_cmi
    mvcon partial_corr_mvar
    (1633, 1200)
    (11,)
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    mvcon cmui_from_pcor_mvar
    mvcmi for seed 7
    mvcon compute_cmi
    mvcon partial_corr_mvar
    (1633, 1200)
    (11,)
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    mvcon cmui_from_pcor_mvar
    mvcmi for seed 8
    mvcon compute_cmi
    mvcon partial_corr_mvar
    (1633, 1200)
    (11,)
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    mvcon cmui_from_pcor_mvar
    mvcmi for seed 9
    mvcon compute_cmi
    mvcon partial_corr_mvar
    (1633, 1200)
    (11,)
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    mvcon cmui_from_pcor_mvar
    mvcmi for seed 10
    mvcon compute_cmi
    mvcon partial_corr_mvar
    (1633, 1200)
    (11,)
    0
    1
    2
    3
    4
    5
    6
    7
    8
    9
    mvcon cmui_from_pcor_mvar




.. GENERATED FROM PYTHON SOURCE LINES 82-83

finally, we z-score the CMI values (and optionally threshold)

.. GENERATED FROM PYTHON SOURCE LINES 83-85

.. code-block:: Python

    z_cmi = z_score(data_cmi, np.array(null_cmis))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /autofs/space/meghnn_001/users/mjas/github_repos/mvcmi_open/mvcmi/algo.py:104: RuntimeWarning: invalid value encountered in divide
      z_cmi[idx_lt] /= sig[idx_lt]




.. GENERATED FROM PYTHON SOURCE LINES 86-87

let us plot the z-scored CMI values

.. GENERATED FROM PYTHON SOURCE LINES 87-90

.. code-block:: Python

    plt.figure()
    plt.imshow(z_cmi)
    plt.colorbar()



.. image-sg:: /auto_examples/images/sphx_glr_plot_hcp_mvcmi_003.png
   :alt: plot hcp mvcmi
   :srcset: /auto_examples/images/sphx_glr_plot_hcp_mvcmi_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.colorbar.Colorbar object at 0x7ff2c40a0580>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (2 minutes 33.410 seconds)


.. _sphx_glr_download_auto_examples_plot_hcp_mvcmi.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_hcp_mvcmi.ipynb <plot_hcp_mvcmi.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_hcp_mvcmi.py <plot_hcp_mvcmi.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
